class Node{
    Node[] links = new Node[26];
    boolean flag = false;

    public boolean containsKey(char ch) {
        return (links[ch - 'a'] != null); 
    }
    public Node get(char ch) {
        return links[ch-'a']; 
    }
    public void put(char ch, Node node) {
        links[ch-'a'] = node; 
    }
    public void setEnd() {
        flag = true; 
    }
    public boolean isEnd() {
        return flag; 
    }
}

class Trie {
    private Node root; 

    /** Initialize your data structure here. */
    public Trie() {
        root = new Node(); 
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        Node node = root;
        for(int i = 0;i < word.length();i++) {
            if(!node.containsKey(word.charAt(i))) {
                node.put(word.charAt(i), new Node()); 
            }
            node = node.get(word.charAt(i)); 
        }
        node.setEnd(); 
    }
    public boolean checkIfAllPrefixExists(String word) {
        Node node = root;
        boolean flag = true; 
        for(int i = 0;i<word.length() && flag;i++) {
            if(node.containsKey(word.charAt(i))) {
                node = node.get(word.charAt(i)); 
                flag = flag & node.isEnd(); 
            }
            else {
                return false; 
            } 
        }
        return flag; 
    }
};

class Solution {

  public static String completeString(int n, String[] a) {
    // Write your code here.
	Trie obj = new Trie();
    for(String word: a) obj.insert(word); 
    String longest = ""; 
    for(int i = 0; i < n; i++) {
        if(obj.checkIfAllPrefixExists(a[i])) {
            if(a[i].length() > longest.length()) {
                longest = a[i]; 
            }
            else if(a[i].length() == longest.length() && a[i].compareTo(longest) < 0) {
                longest = a[i]; 
            }
        }
    }
    if(longest == "") return "None"; 
    return longest; 
  }
}